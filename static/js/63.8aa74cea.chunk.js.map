{"version":3,"file":"static/js/63.8aa74cea.chunk.js","mappings":"0KACA,GAAgB,YAAc,6BAA6B,QAAU,yBAAyB,SAAW,0BAA0B,gBAAkB,kC,UCArJ,EAAuB,yBAAvB,EAA6D,+B,SCEvDA,EAAY,SAAC,GAAD,SAAEC,SAAyBC,EAAqBA,GAIlE,EAFmB,SAACC,GAAD,OAAW,SAAC,KAAD,CAASC,GAAID,EAAME,GAAIC,UAAWN,EAAlC,SAA8CG,EAAMI,QCJlF,EAA0B,6BCG1B,EAFoB,SAACJ,GAAD,OAAW,gBAAKG,UAAWE,EAAhB,SAAiCL,EAAMM,WCuCtE,G,QApCgB,SAACN,GAEb,IAAIO,EAAQP,EAAMQ,YAEdC,EAAkBF,EAAMG,YAAYC,KAAI,SAAAC,GAAM,OAAI,SAAC,EAAD,CAAYR,KAAMQ,EAAOR,KAAMF,GAAIU,EAAOV,QAC5FW,EAAmBN,EAAMO,aAAaH,KAAI,SAAAI,GAAU,OAAI,SAAC,EAAD,CAAaT,QAASS,EAAWT,aAW7F,OACI,iBAAKH,UAAWE,EAAAA,YAAhB,WACI,gBAAKF,UAAWE,EAAAA,QAAhB,SACKI,KAEL,iBAAKN,UAAWE,EAAAA,cAAhB,WACI,gBAAKF,UAAWE,EAAAA,SAAhB,SACKQ,KAEL,iBAAKV,UAAWE,EAAAA,gBAAhB,WACA,qBAAUF,UAAWE,EAAAA,mBACXW,SAhBA,SAACC,GACnB,IAAIC,EAAaD,EAAEE,OAAOC,MAC1BpB,EAAMqB,qBAAqBH,IAeTE,MAAOb,EAAMe,kBACnB,mBAAQC,QAtBP,WACbvB,EAAMwB,cAqBmCrB,UAAWE,EAAAA,eAAxC,qC,UCdpB,OAAeoB,E,QAAAA,KACXC,EAAAA,EAAAA,KAbJ,SAA0BnB,GACtB,MAAO,CACHC,YAAaD,EAAMC,gBAG3B,SAA6BmB,GACzB,MAAO,CACHH,WAAY,kBAAMG,GAASC,EAAAA,EAAAA,QAC3BP,qBAAsB,SAACH,GAAD,OAAgBS,GAASE,EAAAA,EAAAA,IAAkCX,SAMrFY,EAAAA,EAFJ,CAGEC,I,+FCpBEC,EAA6B,SAACzB,GAC9B,MAAO,CACH0B,OAAQ1B,EAAM2B,KAAKD,SAIdH,EAAmB,SAACK,GAM7B,OADqCT,EAAAA,EAAAA,IAAQM,EAARN,EAJrC,SAA4B1B,GACxB,OAAKA,EAAMiC,QACJ,SAACE,GAAD,UAAenC,KADI,SAAC,KAAD,CAAUC,GAAI","sources":["webpack://network/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://network/./src/components/Dialogs/DialogItem/DialogItem.module.css?beb9","components/Dialogs/DialogItem/DialogItem.js","webpack://network/./src/components/Dialogs/MessageItem/MessageItem.module.css?481d","components/Dialogs/MessageItem/MessageItem.js","components/Dialogs/Dialogs.js","components/Dialogs/DialogsContainer.js","hoc/withAuthNavigate.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogsPage\":\"Dialogs_dialogsPage__6y5lN\",\"dialogs\":\"Dialogs_dialogs__oOfa-\",\"messages\":\"Dialogs_messages__iCZur\",\"newMessageBlock\":\"Dialogs_newMessageBlock__CCxM6\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"DialogItem_item__hs+hV\",\"activeLink\":\"DialogItem_activeLink__5Vwwt\"};","import {NavLink} from \"react-router-dom\";\r\nimport classes from \"./DialogItem.module.css\";\r\n\r\nconst setActive = ({isActive}) => isActive ? classes.activeLink : classes.item;\r\n\r\nconst DialogItem = (props) => <NavLink to={props.id} className={setActive}>{props.name}</NavLink>\r\n\r\nexport default DialogItem;","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"MessageItem_message__9qdfo\"};","import styles from \"./MessageItem.module.css\";\r\n\r\nconst MessageItem = (props) => <div className={styles.message}>{props.message}</div>\r\n\r\nexport default MessageItem;\r\n","import styles from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport MessageItem from \"./MessageItem/MessageItem\";\r\nimport React from \"react\";\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let state = props.dialogsPage\r\n\r\n    let dialogsElements = state.dialogsData.map(dialog => <DialogItem name={dialog.name} id={dialog.id}/>)\r\n    let messagesElements = state.messagesData.map(messageObj => <MessageItem message={messageObj.message}/>)\r\n\r\n    let addMessage = () => {\r\n        props.addMessage();\r\n    };\r\n\r\n    let onMessageChange = (e) => {\r\n        let newMessage = e.target.value;\r\n        props.updateNewMessageText(newMessage)\r\n    }\r\n\r\n    return (\r\n        <div className={styles.dialogsPage}>\r\n            <div className={styles.dialogs}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={styles.messagesBlock}>\r\n                <div className={styles.messages}>\r\n                    {messagesElements}\r\n                </div>\r\n                <div className={styles.newMessageBlock}>\r\n                <textarea className={styles.newMessageTextArea}\r\n                          onChange={onMessageChange}\r\n                          value={state.newMessageText}/>\r\n                    <button onClick={addMessage} className={styles.sendNewMessage}>Send Message</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs","import {addMessageActionCreator, updateNewMessageTextActionCreator} from \"../../redux/reducers/dialogsReducer\";\r\nimport {connect} from \"react-redux\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport React from \"react\";\r\nimport {withAuthNavigate} from \"../../hoc/withAuthNavigate\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\nfunction mapStateToProps (state) {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\nfunction mapDispatchToProps (dispatch) {\r\n    return {\r\n        addMessage: () => dispatch(addMessageActionCreator()),\r\n        updateNewMessageText: (newMessage) => dispatch(updateNewMessageTextActionCreator(newMessage))\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthNavigate\r\n)(Dialogs)\r\n\r\n\r\n","import {Navigate} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForNavigate = (state) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport const withAuthNavigate = (Component) => {\r\n    function RedirectComponent (props) {\r\n        if (!props.isAuth) return <Navigate to={'/login'}/>\r\n        return <Component {...props}/>\r\n    }\r\n    let ConnectedAuthNavigateComponent = connect(mapStateToPropsForNavigate)(RedirectComponent)\r\n    return ConnectedAuthNavigateComponent\r\n}\r\n\r\n"],"names":["setActive","isActive","classes","props","to","id","className","name","styles","message","state","dialogsPage","dialogsElements","dialogsData","map","dialog","messagesElements","messagesData","messageObj","onChange","e","newMessage","target","value","updateNewMessageText","newMessageText","onClick","addMessage","compose","connect","dispatch","addMessageActionCreator","updateNewMessageTextActionCreator","withAuthNavigate","Dialogs","mapStateToPropsForNavigate","isAuth","auth","Component"],"sourceRoot":""}