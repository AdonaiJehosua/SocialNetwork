{"version":3,"file":"static/js/716.e414a226.chunk.js","mappings":"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","sources":["components/Profile/Profile.module.css","webpack://network/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatus.js","components/Profile/ProfileInfo/ProfileDataForm.js","components/Profile/ProfileInfo/ProfileInfo.js","webpack://network/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://network/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/PostItem.js","components/Profile/MyPosts/MyPosts.js","components/Profile/MyPosts/MyPostsContainer.js","components/Profile/Profile.js","components/Profile/ProfileContainer.js","hoc/withAuthNavigate.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"main\":\"Profile_main__aG46H\"};","// extracted by mini-css-extract-plugin\nexport default {\"profile_img\":\"ProfileInfo_profile_img__qKLlS\",\"description\":\"ProfileInfo_description__+5Mxa\",\"avatarBox\":\"ProfileInfo_avatarBox__2H6u4\",\"userAvatar\":\"ProfileInfo_userAvatar__iaKdq\",\"changeAvatar\":\"ProfileInfo_changeAvatar__-LInQ\"};","import {useState} from \"react\";\r\n\r\nconst ProfileStatus = (props) => {\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [status, setStatus] = useState(props.status);\r\n\r\n    let activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    let deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    let onStatusChange = (e) => {\r\n        props.updateStatus(props.status);\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <span onDoubleClick={activateEditMode}>{props.status || 'Hello'}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode} value={status}/>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatus","import {Form, Field, Formik} from \"formik\";\r\nimport {Contact} from \"./ProfileInfo\";\r\n\r\nexport const ProfileDataForm = ({profile, ...props}) => {\r\n    return (\r\n        <Formik\r\n            onSubmit={props.onSubmit}\r\n            initialValues={{\r\n                fullName: profile.fullName,\r\n                aboutMe: profile.aboutMe,\r\n                lookingForAJob: profile.lookingForAJob,\r\n                lookingForAJobDescription: profile.lookingForAJobDescription,\r\n                contacts: profile.contacts\r\n            }}\r\n            validate={values => {\r\n                const errors = {};\r\n                return errors\r\n            }}\r\n        >\r\n            {({\r\n                  values,\r\n                  errors,\r\n                  touched,\r\n                  handleChange,\r\n                  handleBlur,\r\n                  handleSubmit,\r\n                  isSubmitting,\r\n                  handleReset\r\n              }) => (\r\n                <Form onSubmit={handleSubmit}>\r\n                    <div>\r\n                        <label>Full name</label>\r\n                        <input name=\"fullName\"\r\n                               type={'text'}\r\n                               onChange={handleChange}\r\n                               onBlur={handleBlur}\r\n                               value={values.fullName}\r\n                               placeholder={'enter full name'}/>\r\n                    </div>\r\n                    <div>\r\n                        <label>About me</label>\r\n                        <input name={'aboutMe'}\r\n                               type={'text'}\r\n                               onChange={handleChange}\r\n                               onBlur={handleBlur}\r\n                               value={values.aboutMe}\r\n                               placeholder={'enter about yourself'}/>\r\n                    </div>\r\n                    <div>\r\n                    <lable>Looking for a job</lable>\r\n                    <Field name={'lookingForAJob'} type={'checkbox'}/>\r\n                    </div>\r\n                    <div>\r\n                        <div>My professional skills</div>\r\n                        <textarea name={'lookingForAJobDescription'}\r\n                                  onChange={handleChange}\r\n                                  onBlur={handleBlur}\r\n                                  value={values.lookingForAJobDescription}\r\n                                  placeholder={'enter your professional skills'}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Contacts</label>\r\n                        {Object.keys(profile.contacts).map(key => {\r\n                            return <div>\r\n                                {key}: <input name={`contacts.` + key}\r\n                                              type={'text'}\r\n                                              placeholder={key}\r\n                                              value={values.contacts[key]}\r\n                                              onChange={handleChange}\r\n                                              onBlur={handleBlur}/>\r\n                            </div>\r\n                        })}\r\n                    </div>\r\n                    <button type=\"submit\">Submit</button>\r\n                    <div>\r\n                        {values.general ? <span>{values.general}</span> : null}\r\n                    </div>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n}","import classes from \"./ProfileInfo.module.css\";\r\nimport ContentImage from \"../../../img/ContentImage.jpg\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\nimport Avatar from '../../../img/Avatar.png'\r\nimport {useParams} from \"react-router\";\r\nimport {useState} from \"react\";\r\nimport {ProfileDataForm} from \"./ProfileDataForm\";\r\n\r\nconst ProfileInfo = (props) => {\r\n    let {userId} = useParams()\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const dectivateEditMode = () => {\r\n        setEditMode(false)\r\n    }\r\n\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e) => {\r\n        if (e.target.files.length) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = async (values, {setFieldValue, setSubmitting}) => {\r\n        await props.saveProfile(values, setFieldValue, setSubmitting);\r\n        setSubmitting(true)\r\n        dectivateEditMode()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <img alt={'ProfileImage'} className={classes.profile_img} src={ContentImage}/>\r\n            <div className={classes.description}>\r\n                <div className={classes.avatarBox}>\r\n                    <img className={classes.userAvatar} alt={'UserAvatar'} src={props.profile.photos.large || Avatar}/>\r\n                    {!userId && <input className={classes.changeAvatar} type={'file'} onChange={onMainPhotoSelected}/>}\r\n                </div>\r\n                <ProfileStatus status={props.status} updateStatus={props.updateStatus}/>\r\n                {editMode ? <ProfileDataForm profile={props.profile} onSubmit={onSubmit}/>\r\n                    : <ProfileData profile={props.profile} editMode={editMode} userId={userId} activateEditMode={activateEditMode}/>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ProfileData = ({profile, ...props}) => {\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <h2>{profile.fullName}</h2>\r\n                {!props.userId && !props.editMode && <button onClick={props.activateEditMode}>Edit profile info</button>}\r\n<h3>About me</h3>\r\n                <div>{profile.aboutMe}</div>\r\n                <div>\r\n                    <h3>{`Looking for a job: ${profile.lookingForAJob ? 'Yes' : 'No'}`}</h3>\r\n                    <h3>My professional skills:</h3>\r\n                    {!profile.lookingForAJobDescription ? <div>No description</div> : <div>{profile.lookingForAJobDescription}</div>}\r\n\r\n                </div>\r\n                <div>\r\n                    <h3>Contacts</h3>\r\n                    {Object.keys(profile.contacts).map(key => {\r\n                        return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Contact = ({contactTitle, contactValue}) => {\r\n    return (\r\n        <div>\r\n            <b>{contactTitle}</b>: {contactValue}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"posts\":\"MyPosts_posts__RrBPB\",\"myPostsBlock\":\"MyPosts_myPostsBlock__j0+zZ\"};","// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"Post_avatar__ZztbG\"};","import classes from './Post.module.css';\r\nimport Avatar from '../../../../img/Avatar.png';\r\n\r\nfunction PostItem(props) {\r\n    return (\r\n        <div>\r\n            <img alt={'avatar'} className={classes.avatar} src={Avatar}/>\r\n            {props.post}\r\n            <div>\r\n                <span>like</span> {props.likesCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PostItem;","import classes from './MyPosts.module.css';\r\nimport PostItem from \"./Post/PostItem\";\r\nimport React from \"react\";\r\n\r\nfunction MyPosts(props) {\r\n\r\n    let postsElements = props.posts.map(post => <PostItem key={post} post={post.postmessage} likesCount={post.likesCount}/>)\r\n\r\n    let onAddPost = () => {props.addPost()};\r\n    let onPostChange = (e) => {\r\n        let text = e.target.value;\r\n        props.updateNewPostText(text);\r\n    }\r\n\r\n    return (\r\n        <div className={classes.myPostsBlock}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <textarea value={props.newPostText} onChange={onPostChange}/>\r\n                <div>\r\n                    <button onClick={onAddPost}>Add post</button>\r\n                </div>\r\n            </div>\r\n            <div className={classes.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default MyPosts;","import React from \"react\";\r\nimport {addPostActionCreator, onPostChangeActionCreator} from \"../../../redux/reducers/profileReducer\";\r\nimport {connect} from \"react-redux\";\r\nimport MyPosts from \"./MyPosts\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.postsData,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: () => dispatch(addPostActionCreator()),\r\n        updateNewPostText: (text) => dispatch(onPostChangeActionCreator(text))\r\n    }\r\n};\r\n\r\nlet MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import classes from './Profile.module.css';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport React from \"react\";\r\n\r\nfunction Profile(props) {\r\n\r\n    return (\r\n        <div className={classes.main}>\r\n            <ProfileInfo savePhoto={props.savePhoto} profile={props.profile} status={props.status} updateStatus={props.updateStatus} saveProfile={props.saveProfile}/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React, {useEffect} from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getProfile, getStatus, savePhoto, saveProfile, updateStatus} from \"../../redux/reducers/profileReducer\";\r\nimport {useParams} from \"react-router\";\r\nimport {withAuthNavigate} from \"../../hoc/withAuthNavigate\";\r\nimport {compose} from \"redux\";\r\n\r\nfunction ProfileContainer(props) {\r\n    let {userId} = useParams()\r\n    if (!userId) {\r\n        userId = props.autorizedUserId\r\n    }\r\n    useEffect(() => {\r\n        props.getProfile(userId);\r\n        props.getStatus(userId);\r\n    })\r\n\r\n    return <Profile {...props}\r\n                    profile={props.profile}\r\n                    status={props.status}\r\n                    updateStatus={props.updateStatus}\r\n                    savePhoto={props.savePhoto}\r\n                    saveProfile={props.saveProfile}\r\n    />\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        autorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth\r\n\r\n    }\r\n}\r\nexport default compose(\r\n    connect(mapStateToProps, {getProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withAuthNavigate\r\n)(ProfileContainer)","import {Navigate} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForNavigate = (state) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport const withAuthNavigate = (Component) => {\r\n    function RedirectComponent (props) {\r\n        if (!props.isAuth) return <Navigate to={'/login'}/>\r\n        return <Component {...props}/>\r\n    }\r\n    let ConnectedAuthNavigateComponent = connect(mapStateToPropsForNavigate)(RedirectComponent)\r\n    return ConnectedAuthNavigateComponent\r\n}\r\n\r\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}"],"names":["props","useState","editMode","setEditMode","status","setStatus","onDoubleClick","onChange","e","updateStatus","currentTarget","value","autoFocus","onBlur","ProfileDataForm","profile","onSubmit","initialValues","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","contacts","validate","values","handleChange","errors","touched","handleBlur","handleSubmit","isSubmitting","handleReset","name","type","placeholder","Object","keys","map","key","general","ProfileData","userId","onClick","activateEditMode","Contact","contactTitle","contactValue","useParams","Preloader","setFieldValue","setSubmitting","saveProfile","alt","className","classes","src","ContentImage","photos","large","Avatar","target","files","length","savePhoto","post","likesCount","postsElements","posts","postmessage","newPostText","text","updateNewPostText","addPost","connect","state","profilePage","postsData","dispatch","addPostActionCreator","onPostChangeActionCreator","MyPosts","compose","autorizedUserId","auth","isAuth","getProfile","getStatus","withAuthNavigate","useEffect","mapStateToPropsForNavigate","Component","to","_objectWithoutProperties","source","excluded","i","getOwnPropertySymbols","sourceSymbolKeys","indexOf","prototype","propertyIsEnumerable","call"],"sourceRoot":""}